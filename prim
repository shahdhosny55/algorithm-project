using System;
using System.Collections.Generic;

class Prim
{
    public static void FindMST(int[,] graph)
    {
        int vertices = graph.GetLength(0);
        bool[] inMST = new bool[vertices];
        int[] key = new int[vertices];
        int[] parent = new int[vertices];

        
        for (int i = 0; i < vertices; i++)
        {
            key[i] = int.MaxValue;
            parent[i] = -1;
            inMST[i] = false;
        }

       
        key[0] = 0;

        for (int count = 0; count < vertices - 1; count++)
        {
            
            int u = MinKey(key, inMST);

            
            inMST[u] = true;

            
            for (int v = 0; v < vertices; v++)
            {
                if (graph[u, v] != 0 && !inMST[v] && graph[u, v] < key[v])
                {
                    key[v] = graph[u, v];
                    parent[v] = u;
                }
            }
        }

        
        PrintMST(parent, graph);
    }

    private static int MinKey(int[] key, bool[] inMST)
    {
        int min = int.MaxValue, minIndex = -1;

        for (int v = 0; v < key.Length; v++)
        {
            if (!inMST[v] && key[v] < min)
            {
                min = key[v];
                minIndex = v;
            }
        }

        return minIndex;
    }

    private static void PrintMST(int[] parent, int[,] graph)
    {
        Console.WriteLine("Edge \tWeight");
        for (int i = 1; i < parent.Length; i++)
        {
            Console.WriteLine(parent[i] + " - " + i + "\t" + graph[i, parent[i]]);
        }
    }

    static void Main(string[] args)
    {
        int[,] graph = {
            { 0, 2, 0, 6, 0 },
            { 2, 0, 3, 8, 5 },
            { 0, 3, 0, 0, 7 },
            { 6, 8, 0, 0, 9 },
            { 0, 5, 7, 9, 0 }
        };

        FindMST(graph);
    }
}
